services:
  db:
    user: root
    build:
      context: ./databases/PostgreSQL
      dockerfile: Dockerfile
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${ADMIN_PASSWORD}
      POSTGRES_DB: ${DBNAME}
      BACKEND_PASSWORD: ${BACKEND_PASSWORD}
      READER_PASSWORD: ${READER_PASSWORD}
      TEST_DB_NAME: ${TEST_DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/PostgreSQL/init.sql:/init.sql
      - ./databases/PostgreSQL/roles.sql:/roles.sql
      - ./databases/PostgreSQL/roots.sql:/roots.sql

  redis:
    container_name: redis_for_bot
    build:
      context: ./databases/Redis
      dockerfile: Dockerfile
    ports:
      - "6379:6379"
    volumes:
      - redis_for_bot_data:/data
      - ./databases/Redis/redis.conf:/redis.conf
    environment:
      REDIS_FOR_BOT_PASSWORD: ${REDIS_FOR_BOT_PASSWORD}
    command: ["sh", "-c", "envsubst < /redis.conf > /tmp/processed_redis.conf && redis-server /tmp/processed_redis.conf"]

  mongodb:
    container_name: mongodb
    image: mongo:6-jammy
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  web:
    container_name: fast-api
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: bash -c "uvicorn main:main --host 0.0.0.0 --port 8000"
    volumes:
      - .:/app
    env_file: ./backend/src/.env
    ports:
      - "8000:8000"
    depends_on:
      - mongodb
      - redis
      - db

  telegram_bot:
    container_name: telegram_bot
    build:
      context: ./bot
      dockerfile: Dockerfile
    environment:
      REDIS_FOR_BOT_PASSWORD: ${REDIS_FOR_BOT_PASSWORD}
      BOT_TOKEN: ${BOT_TOKEN}
    volumes:
      - ./bot/bot_api:/bot/bot_api
    ports:
      - "8081:8081"
    command: ["python3", "bot_api/bot.py"]
    depends_on:
      - web # Зависит от бд-шек так как зависит от web 

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
     - ./frontend/public:/app/public
     - ./frontend/src:/app/src
    ports:
      - "3000:3000"
    depends_on:
      - telegram_bot
    command: ["sh", "-c", "npm run build && serve -s build"]

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf.template:ro
      - ./nginx/certs:/certs
      - nginx_log:/etc/nginx/var/log # Пишем логи в том 

    depends_on:
      - frontend
    command: sh -c "nginx -g 'daemon off;'"
  
  ddns:
    container_name: ddns
    build: 
      context: ./ddns
      dockerfile: Dockerfile
    environment:
      DUCK_TOKEN: ${DUCK_TOKEN}
    depends_on:
      - nginx
    command: ["/bin/bash", "/duckdns/duck.sh"]
      
networks:
  network1:
    driver: overlay
    driver_opts:
      com.docker.network.driver.mtu: 1450

volumes:
  postgres_data:
  redis_for_bot_data:
  mongodb_data:
  nginx_log:
  https_certs:
